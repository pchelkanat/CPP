#include "stdafx.h"
#include <iostream>
#include "cmath"

using namespace std;

int main(){
	int x1,x2,y1,y2,x0,y0,r;
	double W,k;
	cout.precision(5);
	cout<<"Vvedite (x1,y1)\n";
	cin>>x1>>y1;
	cout<<"Vvedite (x2,y2)\n";
	cin>>x2>>y2;
	cout<<"Vvedite (x0,y0,r)\n";
	cin>>x0>>y0>>r;
	// вычисляем уравнение прямой
	if (x1==x2) k=0;
	else
	k=(y2-y1)/(x2-x1);
	double l=y1-x1*k;
	// ищем точки пересечения прямой y=k*x+l и окружности (x-x0)^2+(y-y0)^=r^2;
	// после преобразований получаем квадратное уравнение с неизвестным x, далее будем его считать, как корни m1,m2;
	// выписываем коэфиценты для удобства и вычисляем дискриминант (в данном случае D=1/2 дискриминанта и следовательно для него есть совя формула)
	double a=(1+pow(k,2.0));
	double b= -(x0-k*l-k*y0); //без умножения на 2
	double c=(pow(x0,2.0)+pow(l,2.0)-2*l*y0+pow(y0,2.0)-pow(r,2.0));
	double D=pow(b,2.0)-a*c;
	// если D<=0, то прямая и окружность либо не пересекаются, либо имеют точку касания
	// тогда расстояние между точками W вычисляется как расстояние между данными (x1,y1) и (x2,y2)
	if (D<=0)	W=sqrt(pow(x2-x1,2.0)+pow(y2-y1,2.0));
	// в противном случае else вычисляем корни m1,m2 для x и n1,n2 для y
	else{
		double m1=(-b+sqrt(D))/a;
		double m2=(-b-sqrt(D))/a;
		double n1=m1*k+l;
		double n2=m2*k+l;
		// маленькие отрезки до пересечения прямой с окружностью
		W=sqrt(pow(m1-x1,2.0)+pow(n1-y1,2.0))+sqrt(pow(m2-x2,2.0)+pow(n2-y2,2.0));
		//строим равнобедренны треугольник и вычисляем сторону, образуемую точками пересечения прямой и окружности (m1,n1) и (m2,n2)
		double z=sqrt(pow(m2-m1,2.0)+pow(n2-n1,2.0));
		// угол в радианах
		double f=acos((2*pow(r,2.0)-pow(z,2.0))/(2*pow(r,2.0)));
		//длина дуги окружности
		double C=f*r;
		//складываем сумму отрезков и длину дуги
		W=W+C;}
	//выводим
	cout<<"W="<<W<<"\n";
	system ("pause");
	return 0;
	}


	